
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ANDAND ARRAY ARROW BREAK CATCH CLASS COLON COMMA CONTINUE DIVIDE DIVIDEEQUAL DOT ECHO ELSE EQUALS FLOAT FOR FOREACH FUNCTION GREATER GREATEREQUAL IDENTIFIER IF LBRACE LBRACKET LESS LESSEQUAL LPAREN MINUS MINUSEQUAL MINUSMINUS MULTI_LINE_COMMENT NEW NOT NOTEQUAL NUMBER OR OROR PLUS PLUSEQUAL PLUSPLUS PRINT PRIVATE PROTECTED PUBLIC QUESTION RBRACE RBRACKET RETURN RPAREN SEMICOLON SINGLE_LINE_COMMENT STATIC STRING THROW TIMES TIMESEQUAL TRY VAR WHILEassignment : IDENTIFIER EQUALS expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | NUMBERif_else : IF LPAREN expression RPAREN statement ELSE statementstatement : assignment\n                 | if_else\n                 | expression'
    
_lr_action_items = {'IDENTIFIER':([0,],[2,]),'$end':([1,4,5,10,11,12,13,],[0,-1,-6,-2,-3,-4,-5,]),'EQUALS':([2,],[3,]),'NUMBER':([3,6,7,8,9,],[5,5,5,5,5,]),'PLUS':([4,5,10,11,12,13,],[6,-6,6,6,6,6,]),'MINUS':([4,5,10,11,12,13,],[7,-6,7,7,7,7,]),'TIMES':([4,5,10,11,12,13,],[8,-6,8,8,8,8,]),'DIVIDE':([4,5,10,11,12,13,],[9,-6,9,9,9,9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'assignment':([0,],[1,]),'expression':([3,6,7,8,9,],[4,10,11,12,13,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> assignment","S'",1,None,None,None),
  ('assignment -> IDENTIFIER EQUALS expression','assignment',3,'p_assignment','parser.py',8),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser.py',13),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser.py',14),
  ('expression -> expression TIMES expression','expression',3,'p_expression','parser.py',15),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','parser.py',16),
  ('expression -> NUMBER','expression',1,'p_expression','parser.py',17),
  ('if_else -> IF LPAREN expression RPAREN statement ELSE statement','if_else',7,'p_if_else','parser.py',25),
  ('statement -> assignment','statement',1,'p_statement','parser.py',30),
  ('statement -> if_else','statement',1,'p_statement','parser.py',31),
  ('statement -> expression','statement',1,'p_statement','parser.py',32),
]
